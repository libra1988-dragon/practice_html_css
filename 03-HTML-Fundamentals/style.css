* {
  margin: 0;
  padding: 0;
}

/* PAGE SECTION */

body {
  color: #444;
  font-family: sans-serif;
  border-top: 18px solid #1098ad;
  position: relative;
}

.container {
  width: 800px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; 
  위의 패딩을 줄여서 한번에 적으면 
  아래와 같이 적을 수 있다.
  앞에 값은 위 아래 뒤에 값은 오른쪽 왼쪽을 나타낸다.
  */

  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
}

nav {
  font-size: 18px;
}

article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding: 50px 0;
  width: 500px;
}

/* SMALLER ELEMENTS */

h1,
h2,
h3,
h4,
p,
li {
  /*글꼴*/
  font-family: sans-serif;
  color: #444444;
}

h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-top: 40px;
  margin-bottom: 20px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  /*줄 사이의 간격*/
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 30px;
}

li {
  /*font-size속성의 기본값은 16px이단*/
  font-size: 20px;
  margin-bottom: 10px;
  /* display: inline; */
}

li:last-child {
  /*
   일반적으로 마지막에는 마진을 넣지 않기에]
   초기화 해준다.
  */
  margin-bottom: 0;
}

/* footer p {
  font-size: 16px;
} */

#copyright {
  font-size: 16px;
}

#author {
  font-size: 18px;
  font-style: italic;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  /*리스트 앞에 점 모양 없애기*/
  list-style: none;
}

/* .first-li {
  font-weight: bold;
} */

li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

/*li태그중의 자식들 태그 중 짝수인 애들*/
li:nth-child(even) {
  /* color: red; */
}

/* article p:last-child {
  color: red;
} */

/*스타일 링크*/

/*수도클래스로 a태그중에 href속성이 있는 애들만*/
a:link {
  color: #1098ad;
  /*링크 밑줄 없애기*/
  text-decoration: none;
}

/*a요소를 통해 링크를 방문했을때*/
a:visited {
  /* color: #777; */
}

/*a요소에 커서를 올려놨을떄*/
a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

/*a요소를 클릭했을떄*/
a:active {
  background-color: black;
  font-style: italic;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/* h3 + p::first-line {
  color: red;
} */

h2 {
  position: relative;
}

h2::after {
  content: "TOP";
  background-color: #ffe78e;
  color: #000;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

/*LVHA*/

/*css 출동 해결*/

/* #copyright {
  color: red;
}
.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green !important;
} */

/*css 상속
css에서 상속은 
부모 요소의 속성들을 자식요소에서 
물려 받는 것을 의미한다. 
허나 부모에서 속성을 지정했다고 해서
전부 자식들이 상속을 받는것은 아니다.
주로 text관련 속성들을 상속 받는다. 
*/

/*
 css 적용 우선 순위
 1. !important
 2. 인라인 css
 3. #id 선택자
 4. class 선택자 or 수도클래스
 5. 요소 선택자
 6. 유니버셜 선택자 *
*/

/*
유니버셜 선택자는 모든 요소에 적용되고 
상속이 존재하지 않는다.
*/
.post-img {
  width: 50%;
  height: auto;
}

nav a:link {
  /* background-color: orangered;
  margin: 20px;
  padding: 20px;
  display: block; */
  margin-right: 20px;
  margin-top: 10px;
  display: inline-block;
}

nav a:link:last-child {
  margin-right: 0;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;
  position: absolute;
  bottom: 50px;
  right: 50px;
}

/*
  블록 요소
  인라인 요소

  인라인 요소란 
  컨텐츠 크기만큼 공간을 차지하고 
  line-break가 없으며
  width, height를 설정할 수 없고
  margin과 padding은 수평으로만 설정 가능한 요소를 
  말한다.

  대표적으로 a, butoon, strong, em, 등



  블록요소란
  인라인과 반대로 컨텐츠 크기에 상관없이
  부모요소의 100%의 공간을 차지한다.
  line-break가 있고
  width,height를 설정할 수 있고
  margin, padding 모든 방향 설정 가능하다.
  대표적으로는 p, div, li, body, footer 등등
  거의 대부분의 요소가 블록요소이다.

  인라인 블록요소
  블록과 인라인의 기능을 합쳐놓은 요소로
  겉으로 보기에는 인라인의 특징을 지니고 있고
  안으로는 블록요소의 특징을 지닌다.

  컨텐츠 크기만큼 공간을 차지하지만
  width, height 설정
  margin, padding 모든 값 설정가능
  ex) img

  position 속성
  position 속성의 값은 5가지가 있다.
  1) static
  2) relative
  3) absolute
  4) fixed
  5) sticky
   
  static	기준 없음 (배치 불가능 / 기본값)
  relative	요소 자기 자신을 기준으로 배치
  absolute	부모(조상) 요소를 기준으로 배치
  fixed	뷰포트 기준으로 배치
  stickey	스크롤 영역 기준으로 배치

  static은 기본형으로 아무것도 없을경우 static이다
  html 문서 순서에 따라 표시되며
  top, bottom, left, right 무시한다.

  relative는 요소를 원래 위치에서 벗어나게 배치 할 수
  있다.
  top, bottom, left, right적용

  absolute는 자신의 상위 속성을 기준으로 배치된다.
  일반적으로 자신의 부모를 기준으로 배치되는데
  상위속성이 static이 아닌 요소가 없을 경우
  dom트리를 타고 올라가다 body요소가 배치기준이 된다.
  그러나 일반적으로는 부모요소를 기준으로 배치한다.
  이때 부모는 relative로 설정하고
  자식은 absolute로 해서 부모기준으로 배치를 한다.
  position이 ab


*/
